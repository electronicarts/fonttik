on:
  push:
    branches: ["**"]
  pull_request:
    branches: [ "main", "dev" ]
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      #-uses: actions/cache@v1   <===== YOU DO NOT NEED THIS!
      - name: gather dependencies
        run: |
             sudo apt-get install libdbus-1-dev libxi-dev libxtst-dev

      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      # Or pin to a specific CMake version:
      # lukka/get-cmake@v3.21.2

      # Restore from cache the previously built ports. If a "cache miss" occurs,
      # then vcpkg is bootstrapped. Since a the vcpkg.json is being used later on
      # to install the packages when `run-cmake` runs, no packages are installed at
      # this time.
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10
        with:
          # This is the default location of the directory containing vcpkg sources.
          # Change it to the right location if needed.
          # vcpkgDirectory: '${{ github.workspace }}/vcpkg'

          # If not using a submodule for vcpkg sources, this specifies which commit
          # id must be checkout from a Git repo. It must not set if using a submodule
          # for vcpkg.
          vcpkgGitCommitId: f14984af3738e69f197bf0e647a8dca12de92996

          # This is the glob expression used to locate the vcpkg.json and add its
          # hash to the cache key. Change it to match a single manifest file you want
          # to use. 
          # Note: do not use `${{ github.context }}` to compose the value as it 
          # contains backslashes that would be misinterpreted. Instead
          # compose a value relative to the root of the repository using 
          # `**/path/from/root/of/repo/to/vcpkg.json` to match the desired `vcpkg.json`.
          # vcpkgJsonGlob: '**/vcpkg.json'

          # This is needed to run `vcpkg install` command (after vcpkg is built) in
          # the directory where vcpkg.json has been located. Default is false,
          # It is highly suggested to let `run-cmake` to run vcpkg (i.e. `false`)
          # (i.e. let CMake run `vcpkg install`) using the vcpkg.cmake toolchain.
          # runVcpkgInstall: true

     # The following `run` step is useful to prevent storing partial cache in the GH cache
     # service.
     # This is useful when vcpkg is not run at `run-vcpkg`'s runtime, but later when CMake 
     # is running, e.g. at `run-cmake` runtime. 
     # Driving the environment variable `RUNVCPKG_NO_CACHE`, at the end of the workflow the  
     # `run-vcpkg` post step is instructed to not save anything when the workflow has been 
     # cancelled or it has failed.
     #- run: |
     #    echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV
     #  if: ${{ failure() || cancelled() }}
     #  shell: bash

      - name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10
        with:
          # This is the default path to the CMakeLists.txt along side the
          # CMakePresets.json. Change if you need have CMakeLists.txt and CMakePresets.json
          # located elsewhere.
          # cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'

          # This is the name of the CMakePresets.json's configuration to use to generate
          # the project files. This configuration leverages the vcpkg.cmake toolchain file to
          # run vcpkg and install all dependencies specified in vcpkg.json.
          configurePreset: 'linux-release'

          # This is the name of the CMakePresets.json's configuration to build the project.
          buildPreset: 'linux-release'

    #env:
    #  By default the action disables vcpkg's telemetry by defining VCPKG_DISABLE_METRICS. 
    #  This behavior can be disabled by defining `VCPKG_ENABLE_METRICS` as follows.
    #  VCPKG_ENABLE_METRICS: 1 
    #
    #  [OPTIONAL] Define the vcpkg's triplet you want to enforce, otherwise the default one
    #  for the hosting system will be automatically choosen (x64 is the default on all 
    #  platforms, e.g. `x64-osx`).
    #  VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }} 